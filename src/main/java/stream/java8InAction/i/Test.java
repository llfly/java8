package stream.java8InAction.i;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

/**
 * Created by fangyou on 2018/1/4.
 */
public class Test {
    // Java 8 允许在接口内声明静态方法
    // Java 8 引入了一个新功能，叫默认方法，通过默认方法可以指定接口方法的默认实现

    public void ListSort(){
        List<Integer> numbers = Arrays.asList(3, 5, 1, 2, 6);
        numbers.sort(Comparator.naturalOrder());
    }

    /* 静态方法及接口
        同时定义接口以及工具辅助类(companion class)是Java语言常用的一种模式，工具类定义了与接口实例协作的很多静态方法。
        比如，Collections就是处理Collection对象的辅助类。
        由于静态方法可以存在于接口内部，代码中的这些辅助类就没有了存在的必要，可以把这些静态方法转移到接口内部。
        为了保持后向的兼容性，这些类依然会存在于Java应用程序的接口之中。
    */


    /* 变更对Java程序的影响大体可以分成三种类型的兼容性: 二进制、源代码和函数行为
    1. 二进制级的兼容性表示现有的二进制执行文件能无缝持续链接(包括验证、准备和解析) 和运行。
    比如，为接口添加一个方法就是二进制级的兼容，这种方式下，如果新添加的方法不被调用，接口已经实现的方法可以继续运行，不会出现错误。
    2. 简单地说，源代码级的兼容性表示引入变化之后，现有的程序依然能成功编译通过。
    比如，向接口添加新的方法就不是源码级的兼容，因为遗留代码并没有实现新引入的方法，所以它们无法顺利通过编译。
    3. 函数行为的兼容性表示变更发生之后，程序接受同样的输入能得到同样的结果。
    比如，为接口添加新的方法就是函数行为兼容的，因为新添加的方法在程序中并未被调用(抑或该接口在实现中被覆盖了)。
    */


    /*
    Java 8中抽象类和抽象接口之间的区别是什么呢? 它们不都能包含抽象方法和包含方法体的实现吗?
    首先，一个类只能继承一个抽象类但是一个类可以实现多个接口
    其次，一个抽象类可以通过实例变量(字段)保存一个通用状态，而接口是不能有实例变量的
    */
}
